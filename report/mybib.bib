
%
%  ProjectPlan.bib - source text for project plan bibliography
%


@article{COELHO2020106274,
title = {Is this GitHub project maintained? Measuring the level of maintenance activity of open-source projects},
journal = {Information and Software Technology},
volume = {122},
pages = {106274},
year = {2020},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2020.106274},
url = {https://www.sciencedirect.com/science/article/pii/S0950584920300240},
author = {Jailton Coelho and Marco Tulio Valente and Luciano Milen and Luciana L. Silva},
keywords = {Unmaintained projects, GitHub, Open source software},
abstract = {Context
GitHub hosts an impressive number of high-quality OSS projects. However, selecting “the right tool for the job” is a challenging task, because we do not have precise information about those high-quality projects.
Objective
In this paper, we propose a data-driven approach to measure the level of maintenance activity of GitHub projects. Our goal is to alert users about the risks of using unmaintained projects and possibly motivate other developers to assume the maintenance of such projects.
Method
We train machine learning models to define a metric to express the level of maintenance activity of GitHub projects. Next, we analyze the historical evolution of 2927 active projects in the time frame of one year.
Results
From 2927 active projects, 16% become unmaintained in the interval of one year. We also found that Objective-C projects tend to have lower maintenance activity than projects implemented in other languages. Finally, software tools—such as compilers and editors—have the highest maintenance activity over time.
Conclusions
A metric about the level of maintenance activity of GitHub projects can help developers to select open source projects.}
}

@inproceedings{10.1145/3379597.3387465,
author = {Walden, James},
title = {The Impact of a Major Security Event on an Open Source Project: The Case of OpenSSL},
year = {2020},
isbn = {9781450375177},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3379597.3387465},
doi = {10.1145/3379597.3387465},
abstract = {Context: The Heartbleed vulnerability brought OpenSSL to international attention in 2014. The almost moribund project was a key security component in public web servers and over a billion mobile devices. This vulnerability led to new investments in OpenSSL.Objective: The goal of this study is to determine how the Heart-bleed vulnerability changed the software evolution of OpenSSL. We study changes in vulnerabilities, code quality, project activity, and software engineering practices.Method: We use a mixed methods approach, collecting multiple types of quantitative data and qualitative data from web sites and an interview with a developer who worked on post-Heartbleed changes. We use regression discontinuity analysis to determine changes in levels and slopes of code and project activity metrics resulting from Heartbleed.Results: The OpenSSL project made tremendous improvements to code quality and security after Heartbleed. By the end of 2016, the number of commits per month had tripled, 91 vulnerabilities were found and fixed, code complexity decreased significantly, and OpenSSL obtained a CII best practices badge, certifying its use of good open source development practices.Conclusions: The OpenSSL project provides a model of how an open source project can adapt and improve after a security event. The evolution of OpenSSL shows that the number of known vulnerabilities is not a useful indicator of project security. A small number of vulnerabilities may simply indicate that a project does not expend much effort to finding vulnerabilities. This study suggests that project activity and CII badge best practices may be better indicators of code quality and security than vulnerability counts.},
booktitle = {Proceedings of the 17th International Conference on Mining Software Repositories},
pages = {409–419},
numpages = {11},
keywords = {software security, software evolution, case study},
location = {Seoul, Republic of Korea},
series = {MSR '20}
}

@ARTICLE{6127835,  author={Raja, Uzma and Tretter, Marietta J.},  journal={IEEE Transactions on Software Engineering},   title={Defining and Evaluating a Measure of Open Source Project Survivability},   year={2012},  volume={38},  number={1},  pages={163-174},  doi={10.1109/TSE.2011.39}}

@article{doi:10.1177/1461444820907022,
author = {Mathieu O’Neil and Laure Muselli and Mahin Raissi and Stefano Zacchiroli},
title ={‘Open source has won and lost the war’: Legitimising commercial–communal hybridisation in a FOSS project},
journal = {New Media \& Society},
volume = {23},
number = {5},
pages = {1157-1180},
year = {2021},
doi = {10.1177/1461444820907022},

URL = { 
        https://doi.org/10.1177/1461444820907022
    
},
eprint = { 
        https://doi.org/10.1177/1461444820907022
    
}
,
    abstract = { Information technology (IT) firms are paying developers in Free and Open Source Software (FOSS) projects, leading to the emergence of hybrid forms of work. In order to understand how the firm–project hybridisation process occurs, we present the results of an online survey of participants in the Debian project, as well as interviews with Debian Developers. We find that the intermingling of the commercial logic of the firm and the communal logic of the project requires rhetorical legitimation. We analyse the discourses used to legitimise firm–project cooperation as well as the organisational mechanisms which facilitate this cooperation. A first phase of legitimation, based on firm adoption of open licenses and developer self-fulfilment, aims to erase the commercial/communal divide. A second more recent phase seeks to professionalise work relations inside the project and, in doing so, challenges the social order which restricts participation in FOSS. Ultimately, hybridisation raises the question of the fair distribution of the profits firms derive from FOSS. }
}


@INPROCEEDINGS{7809488,  author={Kitagawa, Norihito and Hata, Hideaki and Ihara, Akinori and Kogiso, Kiminao and Matsumoto, Kenichi},  booktitle={2016 IEEE/ACM Cooperative and Human Aspects of Software Engineering (CHASE)},   title={Code Review Participation: Game Theoretical Modeling of Reviewers in Gerrit Datasets},   year={2016},  volume={},  number={},  pages={64-67},  doi={10.1145/2897586.2897605}}

@ARTICLE{7328331,  author={Zanjani, Motahareh Bahrami and Kagdi, Huzefa and Bird, Christian},  journal={IEEE Transactions on Software Engineering},   title={Automatically Recommending Peer Reviewers in Modern Code Review},   year={2016},  volume={42},  number={6},  pages={530-543},  doi={10.1109/TSE.2015.2500238}}

@inproceedings{10.1145/2030376.2030394,
author = {West, Andrew G. and Chang, Jian and Venkatasubramanian, Krishna and Sokolsky, Oleg and Lee, Insup},
title = {Link Spamming Wikipedia for Profit},
year = {2011},
isbn = {9781450307888},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2030376.2030394},
doi = {10.1145/2030376.2030394},
abstract = {Collaborative functionality is an increasingly prevalent web technology. To encourage participation, these systems usually have low barriers-to-entry and permissive privileges. Unsurprisingly, ill-intentioned users try to leverage these characteristics for nefarious purposes. In this work, a particular abuse is examined -- link spamming -- the addition of promotional or otherwise inappropriate hyperlinks.Our analysis focuses on the wiki model and the collaborative encyclopedia, Wikipedia, in particular. A principal goal of spammers is to maximize exposure, the quantity of people who view a link. Creating and analyzing the first Wikipedia link spam corpus, we find that existing spam strategies perform quite poorly in this regard. The status quo spamming model relies on link persistence to accumulate exposures, a strategy that fails given the diligence of the Wikipedia community. Instead, we propose a model that exploits the latency inherent in human anti-spam enforcement.Statistical estimation suggests our novel model would produce significantly more link exposures than status quo techniques. More critically, the strategy could prove economically viable for perpetrators, incentivizing its exploitation. To this end, we address mitigation strategies.},
booktitle = {Proceedings of the 8th Annual Collaboration, Electronic Messaging, Anti-Abuse and Spam Conference},
pages = {152–161},
numpages = {10},
keywords = {web 2.0 spam, link spam, attack model, spam economics, wikis, collaborative security, Wikipedia, measurement study},
location = {Perth, Australia},
series = {CEAS '11}
}

@INPROCEEDINGS{9240650,  author={Chueshev, Aleksandr and Lawall, Julia and Bendraou, Reda and Ziadi, Tewfik},  booktitle={2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)},   title={Expanding the Number of Reviewers in Open-Source Projects by Recommending Appropriate Developers},   year={2020},  volume={},  number={},  pages={499-510},  doi={10.1109/ICSME46990.2020.00054}}

@INPROCEEDINGS{6498487,  author={Kochhar, Pavneet Singh and Bissyandé, Tegawendé F. and Lo, David and Jiang, Lingxiao},  booktitle={2013 17th European Conference on Software Maintenance and Reengineering},   title={Adoption of Software Testing in Open Source Projects--A Preliminary Study on 50,000 Projects},   year={2013},  volume={},  number={},  pages={353-356},  doi={10.1109/CSMR.2013.48}}

@INPROCEEDINGS{6605914,  author={Kochhar, Pavneet Singh and Bissyandé, Tegawendé F. and Lo, David and Jiang, Lingxiao},  booktitle={2013 13th International Conference on Quality Software},   title={An Empirical Study of Adoption of Software Testing in Open Source Projects},   year={2013},  volume={},  number={},  pages={103-112},  doi={10.1109/QSIC.2013.57}}

@Article{McIntosh2015,
  author       = {Shane McIntosh and Yasutaka Kamei and Bram Adams and Ahmed E. Hassan},
  date         = {2015-04},
  year         = {2015},
  month        = "April",
  journal = {Empirical Software Engineering},
  title        = {An empirical study of the impact of modern code review practices on software quality},
  doi          = {10.1007/s10664-015-9381-9},
  number       = {5},
  pages        = {2146--2189},
  volume       = {21},
  publisher    = {Springer Science and Business Media {LLC}},
}

@Misc{WhatIsMediaWiki,
  date         = {2022-07-26},
  year         = "2022",
  title        = {{Manual:What is MediaWiki?}},
  howpublished = {Online},
  language     = {English},
  author       = {MediaWiki},
  url          = {https://www.mediawiki.org/w/index.php?title=Manual:What_is_MediaWiki?&oldid=5380860},
  note = {Accessed 10 February 2023}
}

@misc{ExtensionCheckUser,
   author = "MediaWiki",
   title = "{Extension:CheckUser}",
   year = "2022",
   howpublished = {Online},
   url = "https://www.mediawiki.org/w/index.php?title=Extension:CheckUser&oldid=5521119",
   note = "Accessed 2 December 2022"
 }

 @INPROCEEDINGS{9240657,  author={Uchôa, Anderson and Barbosa, Caio and Oizumi, Willian and Blenilio, Publio and Lima, Rafael and Garcia, Alessandro and Bezerra, Carla},  booktitle={2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)},   title={How Does Modern Code Review Impact Software Design Degradation? An In-depth Empirical Study},   year={2020},  volume={},  number={},  pages={511-522},  doi={10.1109/ICSME46990.2020.00055}}

 @article{DOGAN2022106737,
title = {Towards a taxonomy of code review smells},
journal = {Information and Software Technology},
volume = {142},
pages = {106737},
year = {2022},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2021.106737},
url = {https://www.sciencedirect.com/science/article/pii/S0950584921001877},
author = {Emre Doğan and Eray Tüzün},
keywords = {Modern code review, Bad practices, Conformance checking, Code review smell, Process smell, Process debt},
abstract = {Context:
Code review is a crucial step of the software development life cycle in order to detect possible problems in source code before merging the changeset to the codebase. Although there is no consensus on a formally defined life cycle of the code review process, many companies and open source software (OSS) communities converge on common rules and best practices. In spite of minor differences in different platforms, the primary purpose of all these rules and practices leads to a faster and more effective code review process. Non-conformance of developers to this process does not only reduce the advantages of the code review but can also introduce waste in later stages of the software development.
Objectives:
The aim of this study is to provide an empirical understanding of the bad practices followed in the code review process, that are code review (CR) smells.
Methods:
We first conduct a multivocal literature review in order to gather code review bad practices discussed in white and gray literature. Then, we conduct a targeted survey with 32 experienced software practitioners and perform follow-up interviews in order to get their expert opinion. Based on this process, a taxonomy of code review smells is introduced. To quantitatively demonstrate the existence of these smells, we analyze 226,292 code reviews collected from eight OSS projects.
Results:
We observe that a considerable number of code review smells exist in all projects with varying degrees of ratios. The empirical results illustrate that 72.2% of the code reviews among eight projects are affected by at least one code review smell.
Conclusion:
The empirical analysis shows that the OSS projects are substantially affected by the code review smells. The provided taxonomy could provide a foundation for best practices and tool support to detect and avoid code review smells in practice.}
}

@ARTICLE{7950877,  author={MacLeod, Laura and Greiler, Michaela and Storey, Margaret-Anne and Bird, Christian and Czerwonka, Jacek},  journal={IEEE Software},   title={Code Reviewing in the Trenches: Challenges and Best Practices},   year={2018},  volume={35},  number={4},  pages={34-42},  doi={10.1109/MS.2017.265100500}}

@INPROCEEDINGS{8445549,  author={Pinto, Gustavo and Dias, Luiz Felipe and Steinmacher, Igor},  booktitle={2018 IEEE/ACM 11th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)},   title={Who Gets a Patch Accepted First? Comparing the Contributions of Employees and Volunteers},   year={2018},  volume={},  number={},  pages={110-113},  doi={}}

@INPROCEEDINGS{6759009,  author={Riehle, Dirk and Riemer, Philipp and Kolassa, Carsten and Schmidt, Michael},  booktitle={2014 47th Hawaii International Conference on System Sciences},   title={Paid vs. Volunteer Work in Open Source},   year={2014},  volume={},  number={},  pages={3286-3295},  doi={10.1109/HICSS.2014.407}}

@ARTICLE{NorrisMissionCritical,  author={Norris, J.S.},  journal={IEEE Software},   title={Mission-critical development with open source software: lessons learned},   year={2004},  volume={21},  number={1},  pages={42-49},  doi={10.1109/MS.2004.1259211}}

@Misc{WikiMediaFoundationAbout,
  title        = {{About - Wikimedia Foundation}},
  year = "2022",
  author       = {{Wikimedia Foundation}},
  url         = {https://wikimediafoundation.org/about/},
  note         = {Online; Accessed: 10 February 2023},
}

 @misc{mediawiki:developersmaintainers,
   author = "MediaWiki",
   howpublished = {Online},
   title = {Maintainers},
   year = "2022",
   url = "https://www.mediawiki.org/w/index.php?title=Developers/Maintainers&oldid=5558352",
   note = "Accessed 1 December 2022"
 }

@misc{ mediawiki:developersmaintainerscheckuser,
   author = "MediaWiki",
   title = {{Developers/Maintainers for CheckUser}},
   year = "2022",
   howpublished = {Online},
   url = "https://www.mediawiki.org/w/index.php?title=Developers/Maintainers&oldid=5578318\#CheckUser",
   note = "Accessed 3 December 2022"
 }

 @misc{ mediawiki:skins,
   author = "MediaWiki",
   title = "{Manual:Skins}",
   year = "2022",
   howpublished = {Online},
   url = "https://www.mediawiki.org/w/index.php?title=Manual:Skins&oldid=5407212",
   note = "Accessed 7 November 2022"
 }

 @misc{ mediawiki:manualextensions,
   author = "MediaWiki",
   title = "{Manual:Extensions}",
   year = "2022",
   howpublished = {Online},
   url = "https://www.mediawiki.org/w/index.php?title=Manual:Extensions\&oldid=5389587",
   note = "Accessed 10 February 2023"
 }

 @misc{ mediawiki:stewardchangecheckuser,
   author = "MediaWiki",
   title = "{Developers/Maintainers (Version from August 2022)}",
   howpublished = {Online},
   year = "2022",
   url = "https://www.mediawiki.org/w/index.php?title=Developers/Maintainers&oldid=5404248",
   note = "Accessed 7 November 2022"
 }

@article{fontanills2012panorama,
  title={Panorama of the wikimediasphere},
  author={Fontanills, David G{\'o}mez},
  journal={Digithum - Universitat Oberta de Catalunya},
  year={2012},
  howpublished = {Online},
  url = {https://doi.org/10.7238/d.v0i14.1476},
  note = {Accessed 1 December 2022}
}

@Misc{TestCoverageMediaWiki,
  key     = {MediaWiki},
  author  = "MediaWiki contributors",
  year    = "2022",
  title   = {{Test coverage - Wikimedia Documentation}},
  url     = {https://doc.wikimedia.org/cover/},
  howpublished = {Online},
  note = {Accessed 5 December 2022},
}

@Misc{ExtensionTestCoverageMediaWiki,
  author       = {{Mediawiki authors}},
  year         = "2022",
  howpublished = {Online},
  title        = {Extension test coverage - {Wikimedia Documentation}},
  url          = {https://doc.wikimedia.org/cover-extensions/?sort=cov},
  note = {Accessed 2 December 2022},
}

@Misc{GerritEfficiency,
  author       = {{Wikimedia Bitergia Analytics}},
  howpublished = {Online},
  year         = "2022",
  title        = {{Gerrit Efficiency - Wikimedia Bitergia Analytics}},
  url          = {https://wikimedia.biterg.io/app/kibana#/dashboard/8c515590-e1de-11e8-8aac-ef7fd4d8cbad?_g=()},
  note = {Accessed 2 December 2022},
}

@Misc{GerritApprovals,
  author       = {{Wikimedia Bitergia Analytics}},
  howpublished = {Online},
  year         = "2022",
  title        = {{Gerrit Approvals - Wikimedia Bitergia Analytics}},
  url          = {https://wikimedia.biterg.io/app/kibana#/dashboard/95487340-6762-11e9-a198-67126215b112?_g=()},
  note = {Accessed 5 December 2022},
}

@Misc{GitOverview,
  author       = {{Wikimedia Bitergia Analytics}},
  howpublished = {Online},
  year         = "2022",
  title        = {{Git - Wikimedia Bitergia Analytics}},
  url          = {https://wikimedia.biterg.io/app/kibana#/dashboard/Git},
  note = {Accessed 5 December 2022},
}

@Misc{PhabricatorBacklog,
  author       = {{Wikimedia Bitergia Analytics}},
  howpublished = {Online},
  year         = "2022",
  title        = {{Maiphest Backlog - Wikimedia Bitergia Analytics}},
  url          = {https://wikimedia.biterg.io/app/kibana#/dashboard/Maniphest-Backlog},
  note = {Accessed 5 December 2022},
}

@Misc{BitergAbout,
  author       = {{Wikimedia Bitergia Analytics}},
  howpublished = {Online},
  year = "2022",
  title        = {{About - Wikimedia Bitergia Analytics}},
  url          = {https://wikimedia.biterg.io/app/kibana#/dashboard/About},
  note = {Accessed 5 December 2022},
}

@Misc{GitExtensionsList,
  author       = {{Contributors to the MediaWiki project}},
  howpublished = {Online},
  year         = {2022},
  title        = {{List of all MediaWiki extensions in the MediaWiki git repository - Wikimedia Phabricator}},
  url          = {https://phabricator.wikimedia.org/source/extensions/browse/},
  note = {Accessed 5 December 2022},
}

@Misc{WikiApiaryAbout,
  author       = {{WikiApiary}},
  howpublished = {Online},
  title        = {About},
  year  = "2021",
  url          = {https://www.wikiapiary.com/wiki/WikiApiary:About},
  note = {Accessed 2 December 2022},
}

@Misc{WikiApiaryExtensions,
  author       = {{WikiApiary}},
  howpublished = {Online},
  year = "2022",
  title        = {{Extensions - WikiApiary}},
  url          = {https://www.wikiapiary.com/wiki/Extension:Extensions},
  note = {Accessed 5 December 2022},
}


@misc{mediawiki:GitReviewers,
   author = "MediaWiki",
   title = "Git/Reviewers",
   year = "2022",
   howpublished = {Online},
   url = "https://www.mediawiki.org/w/index.php?title=Git/Reviewers&oldid=5578429",
   note = "Accessed 10 February 2023"
 }

@misc{scipy:pearsonr,
   author = {{SciPy}},
   title = "scipy.stats.pearsonr",
   howpublished = {Online},
   year  = "2022",
   url = "https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html",
   note = "Accessed 5 December 2022"
 }

 @misc{scipy:ttest,
   author = {{SciPy}},
   title = "scipy.stats.ttest\_ind",
   year  = "2022",
   howpublished = {Online},
   url = "https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest\_ind.html",
   note = "Accessed 5 December 2022"
 }

 @Book{Cohen2013,
  author    = {Jacob Cohen},
  publisher = {Routledge},
  title     = {Statistical Power Analysis for the Behavioral Sciences},
  year      = {2013},
  month     = {May},
  doi       = {10.4324/9780203771587},
}

@article{10.2307/43551404,
 ISSN = {15431215, 15555569},
 URL = {http://www.jstor.org/stable/43551404},
 author = {Nick Barrowman},
 journal = {The New Atlantis},
 volume = {43},
 pages = {23--44},
 publisher = {Center for the Study of Technology and Society},
 title = {Correlation, Causation, and Confusion},
 urldate = {2022-12-05},
 year = {2014}
}


@misc{wikitech:Deployments/Train,
   author = {{Wikitech wiki contributors}},
   title = "{Deployments/Train - Wikitech}",
   year = "2022",
   howpublished = {Online},
   url = "https://wikitech.wikimedia.org/w/index.php?title=Deployments/Train&oldid=2038250",
   note = "Accessed 5 December 2022"
 }

 @Misc{GerritMediaWiki,
  date         = {2022-12-28},
  year         = "2022",
  title        = {{Gerrit}},
  howpublished = {Online},
  language     = {English},
  author       = {MediaWiki},
  url          = {https://www.mediawiki.org/w/index.php?title=Gerrit&oldid=5682310},
  note = {Accessed 10 February 2023}
}

@Misc{UnReviewIoMedium,
  date         = {2020-5-16},
  year         = "2020",
  title        = {{UnReview.io — how we recommend code reviewers for GitHub pull requests}},
  howpublished = {Online},
  language     = {English},
  author       = {{Stackeer.io}},
  url          = {https://medium.com/stackeerio/unreview-io-a039c85d96fe},
  note = {Accessed 10 February 2023}
}

@Misc{UnReviewGitLab,
  date         = {2022-1-4},
  year         = "2022",
  title        = {{The road to smarter code reviewer recommendations}},
  howpublished = {Online},
  language     = {English},
  author       = {{GitLab}},
  url          = {https://about.gitlab.com/blog/2022/01/04/the-road-to-smarter-code-reviewer-recommendations/},
  note = {Accessed 10 February 2023}
}